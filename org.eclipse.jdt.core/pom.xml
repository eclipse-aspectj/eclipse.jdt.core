<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2012, 2023 Eclipse Foundation and others.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Distribution License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/org/documents/edl-v10.php

  Contributors:
     Igor Fedorenko - initial implementation
-->
<!--
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>eclipse.jdt.core</artifactId>
    <groupId>org.eclipse.jdt</groupId>
    <version>4.31.0-SNAPSHOT</version>
  </parent>
  <artifactId>org.eclipse.jdt.core</artifactId>
  <version>3.37.0-SNAPSHOT</version>
  <packaging>eclipse-plugin</packaging>

  <properties>
    <defaultSigning-excludeInnerJars>true</defaultSigning-excludeInnerJars>
    <code.ignoredWarnings>-warn:+fieldHiding,-unavoidableGenericProblems</code.ignoredWarnings>
  </properties>

  <build>
    <plugins>
    <plugin>
		<artifactId>maven-antrun-plugin</artifactId>
		<executions>
			<execution>
				<phase>prepare-package</phase>
				<configuration>
					<target>
						<replace token="bundle_qualifier," value="${buildQualifier}," dir="${project.build.directory}/classes">
							<include name="org/eclipse/jdt/internal/compiler/batch/messages.properties"/>
						</replace>
						<replace token="bundle_version" value="${unqualifiedVersion}" dir="${project.build.directory}/classes">
							<include name="org/eclipse/jdt/internal/compiler/batch/messages.properties"/>
						</replace>
						<copy todir="${project.build.directory}/jdtCompilerAdapter.jar-classes">
							<fileset dir="${project.build.directory}/../../org.eclipse.jdt.core.compiler.batch/target/classes">
								<include name="org/eclipse/jdt/core/*.class"/>
								<include name="org/eclipse/jdt/internal/antadapter/**"/>
							</fileset>
						</copy>
					</target>
				</configuration>
				<goals>
					<goal>run</goal>
				</goals>
			</execution>
		</executions>
	  </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-batch-compiler-source</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/scripts/source</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/scripts/source</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eclipse.tycho.extras</groupId>
        <artifactId>tycho-custom-bundle-plugin</artifactId>
        <version>${tycho.version}</version>
        <executions>
          <execution>
            <id>antadapter</id>
            <phase>package</phase>
            <goals>
              <goal>custom-bundle</goal>
            </goals>
			<configuration>
				<archive>
					<addMavenDescriptor>false</addMavenDescriptor>
				</archive>
              <bundleLocation>${project.basedir}/scripts/antadapter</bundleLocation>
              <classifier>antadapter</classifier>
              <fileSets>
                <fileSet>
                  <directory>${project.build.directory}/jdtCompilerAdapter.jar-classes</directory>
                  <excludes>
                    <exclude>org/eclipse/jdt/core/CheckDebugAttributes*.*</exclude>
                    <exclude>org/eclipse/jdt/core/BuildJarIndex*.*</exclude>
                  </excludes>
                </fileSet>
              </fileSets>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eclipse.tycho</groupId>
        <artifactId>tycho-p2-plugin</artifactId>
        <configuration>
          <baselineMode>warn</baselineMode>
          <baselineReplace>common</baselineReplace>
        </configuration>
        <executions>
          <execution>
            <id>attached-p2-metadata</id>
            <phase>package</phase>
            <goals>
              <goal>p2-metadata</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.aspectj</groupId>
  <artifactId>org.eclipse.jdt.core</artifactId>
  <version>1.9.21.1-SNAPSHOT</version>

  <name>JDT Core for AspectJ</name>
  <description>
    AspectJ forks Eclipse Java Development Tools (JDT) Core, utilising the Eclipse Compiler (ECJ) + APT classes as the
    foundation for the AspectJ Compiler (AJC).
  </description>
  <url>https://www.eclipse.org/aspectj/</url>

  <licenses>
    <license>
      <name>Eclipse Public License - v 2.0</name>
      <url>https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>aclement</id>
      <name>Andy Clement</name>
      <email>aclement@vmware.com</email>
    </developer>
    <developer>
      <id>kriegaex</id>
      <name>Alexander Kriegisch</name>
      <email>kriegaex@aspectj.dev</email>
    </developer>
  </developers>

  <scm>
    <url>https://github.com/eclipse/aspectj.eclipse.jdt.core</url>
    <connection>scm:git:https://github.com/eclipse/aspectj.eclipse.jdt.core.git</connection>
    <developerConnection>scm:git:ssh://git@github.com:eclipse/aspectj.eclipse.jdt.core.git</developerConnection>
  </scm>

  <properties>
    <!-- Basic build properties -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!--
      Eclipse JDT Core now requires Java 17 and has started using more recent source code constructs.
      At least for now, compiling to target 11 ist still possible.
    -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>

    <!-- By default, deploy this public artifact -->
    <maven.deploy.skip>false</maven.deploy.skip>
    <!-- By default, do not create javadoc - override in profile 'release' or manually -->
    <maven.javadoc.skip>true</maven.javadoc.skip>

    <!-- Dependency versions -->
    <aspectj.version>1.9.20.1</aspectj.version>
  </properties>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <repositories>
    <!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
    <repository>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </repository>
  </repositories>

  <pluginRepositories>
    <!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
    <pluginRepository>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </pluginRepository>
    <!--
    <pluginRepository>
      <id>aspectj-dev</id>
      <name>AspectJ artifacts on aspectj.dev</name>
      <url>https://aspectj.dev/maven</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
    </pluginRepository>
    -->
  </pluginRepositories>

  <profiles>
    <profile>
      <id>release</id>
      <properties>
        <!-- By default, do not create javadoc - override in release profile -->
        <maven.javadoc.skip>false</maven.javadoc.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>

    <resources>
      <resource>
        <directory>${project.basedir}/aspectj</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/codeassist</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/dom</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/eval</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/formatter</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/model</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/search</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
      <resource>
        <directory>${project.basedir}/../org.eclipse.jdt.core.compiler.batch/src</directory>
        <includes>
          <include>**/*.rsc</include>
          <include>**/*.properties</include>
          <include>**/*.props</include>
        </includes>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-help-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.0.0-M3</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.2.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.2.0</version>
          <configuration>
            <archive>
              <addMavenDescriptor>false</addMavenDescriptor>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
        </plugin>
        <plugin>
          <groupId>dev.aspectj</groupId>
          <artifactId>aspectj-maven-plugin</artifactId>
          <version>1.13.1</version>
          <dependencies>
            <dependency>
              <groupId>org.aspectj</groupId>
              <artifactId>aspectjtools</artifactId>
              <version>${aspectj.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.5.1</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>1.2.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>1.6</version>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>verify</phase>
              <goals>
                <goal>sign</goal>
              </goals>
              <configuration>
                <!-- Only sign artifacts which are also meant to be deployed -->
                <skip>${maven.deploy.skip}</skip>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
          <executions>
            <execution>
              <id>default-deploy</id>
              <phase>deploy</phase>
              <goals>
                <goal>deploy</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <!-- Deploy at the end of a multi-module build -->
            <deployAtEnd>true</deployAtEnd>
          </configuration>
        </plugin>
        <plugin>
          <!--
            Other than Maven Deploy, this plugin cannot just be added to the 'build/plugins' section of the parent POM
            once and (de-)activated with a simple property like 'maven.deploy.skip' on a per-module basis. See also
            https://issues.sonatype.org/browse/OSSRH-68966. Consequently, we do not add it to the parent but separately
            to each module meant to be published.
          -->
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <version>1.6.8</version>
          <extensions>true</extensions>
          <configuration>
            <serverId>ossrh</serverId>
            <nexusUrl>https://oss.sonatype.org/</nexusUrl>
            <autoReleaseAfterClose>false</autoReleaseAfterClose>
          </configuration>
          <dependencies>
            <!--
              Plugin version 1.6.8 does not work on JDK 16+ without special MAVEN_OPTS opening certain modules,
              because the XStream version used needs it. One workaround is to use a more recent XStream version.
              TODO: remove plugin dependency after OSSRH-66257, NEXUS-26993 are fixed.
            -->
            <dependency>
              <groupId>com.thoughtworks.xstream</groupId>
              <artifactId>xstream</artifactId>
              <version>1.4.15</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>truezip-maven-plugin</artifactId>
          <version>1.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.5.0</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>

      <!-- Build Helper must run *before* Enforcer, because the latter uses a property defined by the former -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-source-dirs</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <!-- The Eclipse JDT project definitely has a non-Maven directory layout with many source directories -->
              <sources>
                <!-- We do not need 'antadapter' -->
                <!--<source>${project.basedir}/antadapter</source>-->
                <source>${project.basedir}/aspectj</source>
                <source>${project.basedir}/batch</source>
                <source>${project.basedir}/codeassist</source>
                <source>${project.basedir}/compiler</source>
                <source>${project.basedir}/dom</source>
                <source>${project.basedir}/eval</source>
                <source>${project.basedir}/formatter</source>
                <source>${project.basedir}/model</source>
                <source>${project.basedir}/search</source>
                <!-- Add compiler APT support -->
                <source>${project.basedir}/../org.eclipse.jdt.core.compiler.batch/src</source>
              </sources>
            </configuration>
          </execution>
          <!--
            Replace '\' Windows file separators by '/' in order to expand the new property 'compiler-message-properties'
            into a string literal in Maven Enforcer rule 'evaluateBeanshell' further below.
          -->
          <execution>
            <id>compiler-message-properties</id>
            <goals>
              <goal>regex-property</goal>
            </goals>
            <configuration>
              <name>compiler-message-properties</name>
              <value>${project.basedir}/../org.eclipse.jdt.core.compiler.batch/src/org/eclipse/jdt/internal/compiler/batch/messages.properties</value>
              <regex>\\</regex>
              <replacement>/</replacement>
              <failIfNoMatch>false</failIfNoMatch>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-rules</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <!-- We need the most recent JDK module 'java.compiler' in order to compile some APT classes -->
                  <version>16</version>
                </requireJavaVersion>
                <evaluateBeanshell>
                  <message>
                    Compiler message resource file ${compiler-message-properties} must not contain tab characters, please use spaces instead!
                  </message>
                  <condition><![CDATA[
                    FileReader fileReader = new FileReader("${compiler-message-properties}");
                    BufferedReader bufferReader = new BufferedReader(fileReader);
                    boolean containsTab = false;
                    String line;
                    while((line = bufferReader.readLine()) != null) {
                      if (line.contains("\t")) {
                        if (!containsTab) {
                          System.out.println("Lines containing tab characters detected in resource file:");
                          containsTab = true;
                        }
                        System.out.println(line);
                      }
                    }
                    fileReader.close();
                    bufferReader.close();
                    !containsTab
                  ]]></condition>
                </evaluateBeanshell>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>package</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!--
            Avoid attaching the source JAR here, because Maven Shade will add the source uber JAR later. Because both
            JARs have the same final name, Maven Install/Deploy would see two artifacts attached to the build, which
            would lead to double deployment and hence to an error "Transfer failed for ...-sources.jar 409 Conflict".
            See also https://issues.apache.org/jira/browse/MDEPLOY-254 and comments by Alexander Kriegisch.
          -->
          <!-- TODO: Fixed in Maven 3.8.2. Consider enforcing minimum Maven version and removing 'attach=false'. -->
          <attach>false</attach>
          <archive>
            <addMavenDescriptor>false</addMavenDescriptor>
          </archive>
          <excludes>
            <exclude>**/org/eclipse/jdt/core/JDTCompilerAdapter.java</exclude>
          </excludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <executions>
          <!--
            Delete target/*.jar before running Maven Shade. This avoids ugly warnings and duplicate JARs with different
            names when re-shading existing JARs from previous builds.
          -->
          <execution>
            <id>pre-shade-clean</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
              <excludeDefaultDirectories>true</excludeDefaultDirectories>
              <filesets>
                <fileset>
                  <directory>${project.build.directory}</directory>
                  <includes>
                    <include>*.jar</include>
                  </includes>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <!-- Let the AspectJ compiler do the work -->
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>dev.aspectj</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <configuration>
          <!--<showWeaveInfo>true</showWeaveInfo>-->
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
          <Xlint>ignore</Xlint>
          <encoding>${project.build.sourceEncoding}</encoding>
          <!--<verbose>true</verbose>-->
          <!--<warn>constructorName,packageDefaultMethod,deprecation,maskedCatchBlocks,unusedLocals,unusedArguments,unusedImport</warn>-->
          <excludes>
            <exclude>**/org/eclipse/jdt/core/JDTCompilerAdapter.java</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <!-- IMPORTANT -->
            <phase>process-sources</phase>
            <goals>
              <goal>compile</goal>
              <!--<goal>test-compile</goal>-->
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <id>shade-jdt-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <minimizeJar>false</minimizeJar>
              <createSourcesJar>true</createSourcesJar>
              <shadeSourcesContent>true</shadeSourcesContent>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <artifactSet>
                <excludes>
                  <exclude>org.aspectj:aspectjrt</exclude>
                  <exclude>org.eclipse.platform:org.eclipse.core.expressions</exclude>
                  <exclude>org.eclipse.platform:org.eclipse.core.commands</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>*</artifact>
                  <excludes>
                    <!-- These are from org.eclipse.jdt.core/build.xml -->
                    <exclude>META-INF/**</exclude>
                    <exclude>org/apache/**</exclude>
                    <exclude>org/w3c/**</exclude>
                    <exclude>org/xml/**</exclude>
                    <!-- Excluding JFace breaks javadoc generation in AspectJ due to missing classes -->
                    <!--<exclude>org/eclipse/jface/**</exclude>-->

                    <!-- These seem to be unnecessary for AspectJ, because it is ignorant of OSGi  -->
                    <exclude>*</exclude>
                    <exclude>OSGI-INF/**</exclude>
                    <exclude>about_files/**</exclude>
                    <exclude>natives/**</exclude>
                    <exclude>schema/**</exclude>
                    <exclude>ant_tasks/**</exclude>
                    <exclude>**/module-info.class</exclude>
                    <exclude>**/plugin.properties</exclude>
                    <exclude>**/.options</exclude>
                    <exclude>**/.api_description</exclude>
                    <exclude>**/*.html</exclude>
                    <exclude>**/plugin.xml</exclude>
                  </excludes>
                </filter>
              </filters>
              <relocations>
                <relocation>
                  <pattern>org.eclipse.jdt</pattern>
                  <shadedPattern>org.aspectj.org.eclipse.jdt</shadedPattern>
                  <excludes>
                    <!--
                      There are (at least) two files we have to be careful about: AssistOptions and CompilerOptions
                      include option strings that we must not change, as AJDT will be working with them without the
                      prefix. The following exclusions relate to the option prefixes used in these two and many more
                      classes. We have to be careful to double-check for each exclusion to not intersect with actual
                      package names. this is why sometimes we cannot use '.*' but must name the exact properties.
                      Otherwise, this would not work, and we would end up with excluded classes.
                    -->
                    <exclude>org.eclipse.jdt.MODULE_PATH</exclude>
                    <exclude>org.eclipse.jdt.USER_LIBRARY</exclude>
                    <exclude>org.eclipse.jdt.annotation.*</exclude>
                    <exclude>org.eclipse.jdt.core.codeComplete.*</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.annotation.*</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.codegen.*</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.compliance</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.debug.*</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.doc.*</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.emulateJavacBug8031744</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.generateClassFiles</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.maxProblemPerUnit</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.problem.*</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.processAnnotations</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.release</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.source</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.storeAnnotations</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.taskCaseSensitive</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.taskPriorities</exclude>
                    <exclude>org.eclipse.jdt.core.compiler.taskTags</exclude>
                    <exclude>org.eclipse.jdt.core.encoding</exclude>
                    <exclude>org.eclipse.jdt.core.formatter.comment.*</exclude>
                    <exclude>org.eclipse.jdt.core.javamodelcache.*</exclude>
                    <exclude>org.eclipse.jdt.core.parser.nd.chunks</exclude>
                    <exclude>org.eclipse.jdt.core.problem</exclude>
                    <exclude>org.eclipse.jdt.core.task</exclude>
                    <exclude>org.eclipse.jdt.core.tests.model.JavaIndexTests</exclude>
                    <exclude>org.eclipse.jdt.disable_CTSYM_cache</exclude>
                    <exclude>org.eclipse.jdt.disable_JRT_cache</exclude>
                    <exclude>org.eclipse.jdt.internal.debug.*</exclude>
                    <exclude>org.eclipse.jdt.internal.debug.compile.mode</exclude>
                    <exclude>org.eclipse.jdt.internal.eval.target</exclude>
                    <!-- Relocate message.properties, do NOT exclude -->
                    <!--
                    <exclude>org.eclipse.jdt.core.formatter.messages</exclude>
                    <exclude>org.eclipse.jdt.core.index.messages</exclude>
                    <exclude>org.eclipse.jdt.internal.antadapter.messages</exclude>
                    <exclude>org.eclipse.jdt.internal.compiler.batch.messages</exclude>
                    <exclude>org.eclipse.jdt.internal.compiler.messages</exclude>
                    <exclude>org.eclipse.jdt.internal.compiler.problem.messages</exclude>
                    <exclude>org.eclipse.jdt.internal.core.nd.indexer.messages</exclude>
                    <exclude>org.eclipse.jdt.internal.core.util.messages</exclude>
                    -->
                    <!--
                    TODO:
                      Always make sure that exclusions are up to date. Heuristicallly, you can find out like this:
                        find org.eclipse.jdt.core org.eclipse.jdt.core.compiler.batch -type f -name '*.java' |
                          xargs grep -E '"org\.eclipse\.jdt\..*\$NON\-NLS-[0-9]+\$' |
                          sed -E 's/.*"(org\.eclipse\.jdt\.[^"]*).*/\1/' |
                          sort |
                          uniq
                      If you want to inspect the full matches, just remove '| sed ... | sort | uniq' from the command.
                    -->
                  </excludes>
                </relocation>
              </relocations>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <executions>
          <!-- Remove shaded dependencies from uber JAR -->
          <execution>
            <id>flatten</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
            <configuration>
              <flattenMode>oss</flattenMode>
              <pomElements>
                <dependencies>remove</dependencies>
              </pomElements>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <flattenedPomFilename>flattened-pom.xml</flattenedPomFilename>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>truezip-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>unzip-relocated-sources</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <!--
                Skip, if javadoc generation is also meant to be skipped, which is the default unless the 'release'
                profile is active or the property is overridden manually to be false. See property definitions in parent
                POM for default case and release profile.
              -->
              <skip>${maven.javadoc.skip}</skip>
              <verbose>true</verbose>
              <!-- TODO: Include 'aj' package for ASM-renamed contained in aspectjtools? -->
              <fileset>
                <directory>${project.build.directory}/${project.build.finalName}-sources.jar/org/aspectj</directory>
                <outputDirectory>${project.build.directory}/unpacked-sources/org/aspectj</outputDirectory>
              </fileset>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <id>javadoc-jar</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
            <!--
              FIXME: This configuration works with JDK 16, but throws errors on other JDK versions, e.g. 14. It looks as
               if the Maven Javadoc plugin does not do a particularly good job applying the plugin settings in a way
               making it work with different JDK javadoc tool versions. I am saying that, because when using the tool
               directly on the console, it works with basic settings and the correct classpath.
            -->
            <configuration>
              <sourcepath>${project.build.directory}/unpacked-sources</sourcepath>
              <subpackages>org.aspectj</subpackages>
              <!-- Deactivate doclint checks in order to suppress errors -->
              <doclint>none</doclint>
              <!-- Generate class use xref, making javadocs considerably bigger, but also more informative -->
              <use>true</use>
              <!-- FIXME: Why does it fail without this parameter? -->
              <javadocVersion>${maven.compiler.source}</javadocVersion>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Deploy this module to Nexus (Sonatype OSSRH, releases promotable to Maven Central) -->
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
      </plugin>

      <!--
        This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'effective-pom',
        'active-profiles', 'effective-settings' or 'evaluate' from a modern IDE in order to get quick information about
        the current build configuration for any given module.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
      </plugin>

      <!--
        This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'analyze' or
        'tree' from a modern IDE in order to inspect dependency management in the project.

        Tip: If you want a quick overview, run this from the project from the project root directory:
        mvn -P \!create-docs dependency:analyze | grep -E '\[(WARNING|INFO\] -+< .+:.+ >-+)' > dependency-analyze.txt
        But be careful that all modules are actually listed. You can make sure by running the command without 'grep'
        first, then you see if there are any compile problems which 'grep' would filter out.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <ignoredUnusedDeclaredDependencies>
            <!-- Declared in parent POM for convenience, but not used in every module -->
<!--
            <ignoredUnusedDeclaredDependency>junit:junit:jar</ignoredUnusedDeclaredDependency>
            <ignoredUnusedDeclaredDependency>org.aspectj:lib:jar</ignoredUnusedDeclaredDependency>
-->
          </ignoredUnusedDeclaredDependencies>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <dependencyManagement>
    <!--
      Taken from:
      https://central.sonatype.com/artifact/org.eclipse.jdt/org.eclipse.jdt.core/3.35.0
      Click the "Dependencies" tab to inspect direct/indirect dependencies.
      The POM can be viewed inline on the main tab or downloaded from:
      https://repo1.maven.org/maven2/org/eclipse/jdt/org.eclipse.jdt.core/3.35.0/org.eclipse.jdt.core-3.35.0.pom

      Rename JDT Core POM to pom.xml in an empty directory, then run 'mvn dependency:tree':

      org.eclipse.jdt:org.eclipse.jdt.core:jar:3.35.0
      +- org.eclipse.platform:org.eclipse.core.resources:jar:3.19.100:compile
      |  +- org.eclipse.platform:org.eclipse.core.expressions:jar:3.9.100:compile
      |  \- org.eclipse.platform:org.eclipse.osgi:jar:3.18.500:compile
      +- org.eclipse.platform:org.eclipse.core.runtime:jar:3.29.0:compile
      |  +- org.eclipse.platform:org.eclipse.equinox.common:jar:3.18.100:compile
      |  +- org.eclipse.platform:org.eclipse.core.jobs:jar:3.15.0:compile
      |  +- org.eclipse.platform:org.eclipse.equinox.registry:jar:3.11.300:compile
      |  +- org.eclipse.platform:org.eclipse.equinox.preferences:jar:3.10.300:compile
      |  |  \- org.osgi:org.osgi.service.prefs:jar:1.1.2:compile
      |  |     \- org.osgi:osgi.annotation:jar:8.0.1:compile
      |  +- org.eclipse.platform:org.eclipse.core.contenttype:jar:3.9.100:compile
      |  \- org.eclipse.platform:org.eclipse.equinox.app:jar:1.6.300:compile
      +- org.eclipse.platform:org.eclipse.core.filesystem:jar:1.10.100:compile
      +- org.eclipse.platform:org.eclipse.text:jar:3.13.100:compile
      |  \- org.eclipse.platform:org.eclipse.core.commands:jar:3.11.100:compile
      +- org.eclipse.platform:org.eclipse.team.core:jar:3.10.100:compile
      |  \- org.eclipse.platform:org.eclipse.compare.core:jar:3.8.100:compile
      \- org.eclipse.jdt:ecj:jar:3.35.0:compile

      Repeat the same procedure again whenever you upgrade JDT Core via merge from upstream. Then update direct and
      transitive dependencies (maybe there are new or absolete ones) and fix their versions in this dependency
      management section. Otherwise, AspectJ JDT Core builds would not be repeatable, pulling updated dependency class
      files into the uber JAR whenever a dependency version is upgraded within its version number range.

      After dependency-managing all ranges to fixed version in the tree above, running 'mvn dependency:tree' again
      should yield a clean dependency tree without any "version selected from constraint" sections.
    -->
    <dependencies>

      <!-- Direct dependencies (use below in 'dependencies' section) -->
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.resources</artifactId>
        <version>3.19.100</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.runtime</artifactId>
        <version>3.29.0</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.filesystem</artifactId>
        <version>1.10.100</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.text</artifactId>
        <version>3.13.100</version>
      </dependency>
      <!-- Not this one, because optional=true and not used in AspectJ -->
      <!--
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.team.core</artifactId>
        <version>3.10.100</version>
        <optional>true</optional>
      </dependency>
      -->
      <!-- Not this one, because for our purposes it is unnecessary and contains duplicate classes -->
      <!--
      <dependency>
        <groupId>org.eclipse.jdt</groupId>
        <artifactId>ecj</artifactId>
        <version>3.35.0</version>
      </dependency>
      -->

      <!-- Transitive dependencies from dependency tree -->
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.expressions</artifactId>
        <version>3.9.100</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.osgi</artifactId>
        <version>3.18.500</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.equinox.common</artifactId>
        <version>3.18.100</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.jobs</artifactId>
        <version>3.15.0</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.equinox.registry</artifactId>
        <version>3.11.300</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.equinox.preferences</artifactId>
        <version>3.10.300</version>
      </dependency>
      <dependency>
        <groupId>org.osgi</groupId>
        <artifactId>org.osgi.service.prefs</artifactId>
        <version>1.1.2</version>
      </dependency>
      <dependency>
        <groupId>org.osgi</groupId>
        <artifactId>osgi.annotation</artifactId>
        <version>8.0.1</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.contenttype</artifactId>
        <version>3.9.100</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.equinox.app</artifactId>
        <version>1.6.300</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.platform</groupId>
        <artifactId>org.eclipse.core.commands</artifactId>
        <version>3.11.100</version>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!--
      Taken org.eclipse.jdt:org.eclipse.jdt.core.
      For more details, see comment in dependencyManagement section.
    -->
    <dependency>
      <groupId>org.eclipse.platform</groupId>
      <artifactId>org.eclipse.core.resources</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.platform</groupId>
      <artifactId>org.eclipse.core.runtime</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.platform</groupId>
      <artifactId>org.eclipse.core.filesystem</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.platform</groupId>
      <artifactId>org.eclipse.text</artifactId>
    </dependency>

    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${aspectj.version}</version>
    </dependency>
  </dependencies>

</project>
